@using CodeTestV2.Application.Models
@using CodeTestV2.Application.Services
@using CodeTestV2.Core.Interfaces.Services
@inject IEmployeeService<Employee> EmployeeService

<div>
    <div class="employees-container">
        <div style="display: flex; flex-direction: row; flex-wrap: wrap; justify-content: space-around;">

            @foreach (var emp in EmployeeCollection)
            {
                <EmployeeTile Employee="emp" OnEmployeeWork="OnWorkClicked" OnEmployeeVacation="OnVacationClicked"/>
            }
        </div>
    </div>
</div>


@code {
    bool queued = false;

    // Update employee's work.
    private async Task OnWorkClicked((Employee employee, ushort workDays) workArgs)
    {
        var (employee, days) = workArgs;
        if (employee is null || days <= 0) await Task.CompletedTask;
        
        try
        {
            employee.Work(days);

            await UpdateEmployee(employee);
        }
        catch (Exception e)
        {
            await OnException.InvokeAsync(e.Message);
        }
    }
    
    // Update employee's vacation.
    private async Task OnVacationClicked((Employee employee, ushort vacationDays) vacationArgs)
    {
        var (employee, days) = vacationArgs;
        if (employee is null || days <= 0) await Task.CompletedTask;
        
        try
        {
            employee.TakeVacation(days);

            await UpdateEmployee(employee);
        }
        catch (Exception e)
        {
            await OnException.InvokeAsync(e.Message);
        }
        

    }
    
    CancellationTokenSource tokenSource = new();
    
    // update and save employee changes.
    private async Task UpdateEmployee(Employee employee)
    {
        if (employee is null 
            || EmployeeCollection is null 
            ||  !EmployeeCollection.Any()) 
                await Task.CompletedTask;

        try
        {
            if (queued)
            {
                tokenSource.Cancel();
                tokenSource = new CancellationTokenSource();
            }
            
            queued = true;

            await Task.Delay(400, tokenSource.Token);

            await EmployeeService.UpdateEmployeeAsync(employee, tokenSource.Token);
        }
        catch (TaskCanceledException)
        {
        }
        catch (Exception e)
        {
            await OnException.InvokeAsync(e.Message);
        }
        finally
        {
            queued = false;
        }
    }
    
    [Parameter]
    public IList<Employee> EmployeeCollection { get; set; }
    
    [Parameter]
    public EventCallback OnEmployeeUpdated { get; set; }
    
    [Parameter]
    public EventCallback<string> OnException { get; set; }
}